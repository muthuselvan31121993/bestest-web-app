import * as tslib_1 from "tslib";
import { DOCUMENT } from '@angular/common';
import { APP_ID, NgModule } from '@angular/core';
import { BEFORE_APP_SERIALIZED } from '@angular/platform-server';
import { hydrateDocument } from '@ionic/core/hydrate';
// @dynamic
let IonicServerModule = class IonicServerModule {
};
IonicServerModule = tslib_1.__decorate([
    NgModule({
        providers: [
            {
                provide: BEFORE_APP_SERIALIZED,
                useFactory: hydrateIonicComponents,
                multi: true,
                deps: [DOCUMENT, APP_ID]
            }
        ]
    })
], IonicServerModule);
export { IonicServerModule };
// @dynamic
// tslint:disable-next-line: only-arrow-functions
export function hydrateIonicComponents(doc, appId) {
    return () => {
        return hydrateDocument(doc, {
            clientHydrateAnnotations: false,
            excludeComponents: [
                // overlays
                'ion-action-sheet',
                'ion-alert',
                'ion-loading',
                'ion-modal',
                'ion-picker',
                'ion-popover',
                'ion-toast',
                'ion-toast',
                // navigation
                'ion-router',
                'ion-route',
                'ion-route-redirect',
                'ion-router-link',
                'ion-router-outlet',
                // tabs
                'ion-tabs',
                'ion-tab',
                // auxiliar
                'ion-picker-column',
                'ion-virtual-scroll'
            ]
        })
            .then(hydrateResults => {
            hydrateResults.diagnostics.forEach(d => {
                if (d.type === 'error') {
                    console.error(d.messageText);
                }
                else if (d.type === 'debug') {
                    console.debug(d.messageText);
                }
                else {
                    console.log(d.messageText);
                }
            });
            if (doc.head != null) {
                const styleElms = doc.head.querySelectorAll('style[data-styles]');
                for (let i = 0; i < styleElms.length; i++) {
                    styleElms[i].setAttribute('ng-transition', appId);
                }
            }
            if (doc.body != null) {
                const ionPages = doc.body.querySelectorAll('.ion-page.ion-page-invisible');
                for (let i = 0; i < ionPages.length; i++) {
                    ionPages[i].classList.remove('ion-page-invisible');
                }
            }
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9uaWMtc2VydmVyLW1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bpb25pYy9hbmd1bGFyLXNlcnZlci8iLCJzb3VyY2VzIjpbImlvbmljLXNlcnZlci1tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdEQsV0FBVztBQVdYLElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0NBQUcsQ0FBQTtBQUFwQixpQkFBaUI7SUFWN0IsUUFBUSxDQUFDO1FBQ1IsU0FBUyxFQUFFO1lBQ1Q7Z0JBQ0UsT0FBTyxFQUFFLHFCQUFxQjtnQkFDOUIsVUFBVSxFQUFFLHNCQUFzQjtnQkFDbEMsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQzthQUN6QjtTQUNGO0tBQ0YsQ0FBQztHQUNXLGlCQUFpQixDQUFHO1NBQXBCLGlCQUFpQjtBQUU5QixXQUFXO0FBQ1gsaURBQWlEO0FBQ2pELE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxHQUFRLEVBQUUsS0FBVTtJQUN6RCxPQUFPLEdBQUcsRUFBRTtRQUNWLE9BQU8sZUFBZSxDQUFDLEdBQUcsRUFBRTtZQUMxQix3QkFBd0IsRUFBRSxLQUFLO1lBQy9CLGlCQUFpQixFQUFFO2dCQUNqQixXQUFXO2dCQUNYLGtCQUFrQjtnQkFDbEIsV0FBVztnQkFDWCxhQUFhO2dCQUNiLFdBQVc7Z0JBQ1gsWUFBWTtnQkFDWixhQUFhO2dCQUNiLFdBQVc7Z0JBQ1gsV0FBVztnQkFFWCxhQUFhO2dCQUNiLFlBQVk7Z0JBQ1osV0FBVztnQkFDWCxvQkFBb0I7Z0JBQ3BCLGlCQUFpQjtnQkFDakIsbUJBQW1CO2dCQUVuQixPQUFPO2dCQUNQLFVBQVU7Z0JBQ1YsU0FBUztnQkFFVCxXQUFXO2dCQUNYLG1CQUFtQjtnQkFDbkIsb0JBQW9CO2FBQ3JCO1NBQ0YsQ0FBQzthQUNELElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUNyQixjQUFjLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDckMsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtvQkFDdEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7aUJBQzlCO3FCQUFNLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7b0JBQzdCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2lCQUM5QjtxQkFBTTtvQkFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztpQkFDNUI7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUVILElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7Z0JBQ3BCLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CLENBQWlDLENBQUM7Z0JBQ2xHLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUN6QyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDbkQ7YUFDRjtZQUVELElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7Z0JBQ3BCLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsOEJBQThCLENBQTRCLENBQUM7Z0JBQ3RHLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUN4QyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO2lCQUNwRDthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQVBQX0lELCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQkVGT1JFX0FQUF9TRVJJQUxJWkVEIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tc2VydmVyJztcbmltcG9ydCB7IGh5ZHJhdGVEb2N1bWVudCB9IGZyb20gJ0Bpb25pYy9jb3JlL2h5ZHJhdGUnO1xuXG4vLyBAZHluYW1pY1xuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogQkVGT1JFX0FQUF9TRVJJQUxJWkVELFxuICAgICAgdXNlRmFjdG9yeTogaHlkcmF0ZUlvbmljQ29tcG9uZW50cyxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgZGVwczogW0RPQ1VNRU5ULCBBUFBfSURdXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIElvbmljU2VydmVyTW9kdWxlIHt9XG5cbi8vIEBkeW5hbWljXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG9ubHktYXJyb3ctZnVuY3Rpb25zXG5leHBvcnQgZnVuY3Rpb24gaHlkcmF0ZUlvbmljQ29tcG9uZW50cyhkb2M6IGFueSwgYXBwSWQ6IGFueSkge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHJldHVybiBoeWRyYXRlRG9jdW1lbnQoZG9jLCB7XG4gICAgICBjbGllbnRIeWRyYXRlQW5ub3RhdGlvbnM6IGZhbHNlLFxuICAgICAgZXhjbHVkZUNvbXBvbmVudHM6IFtcbiAgICAgICAgLy8gb3ZlcmxheXNcbiAgICAgICAgJ2lvbi1hY3Rpb24tc2hlZXQnLFxuICAgICAgICAnaW9uLWFsZXJ0JyxcbiAgICAgICAgJ2lvbi1sb2FkaW5nJyxcbiAgICAgICAgJ2lvbi1tb2RhbCcsXG4gICAgICAgICdpb24tcGlja2VyJyxcbiAgICAgICAgJ2lvbi1wb3BvdmVyJyxcbiAgICAgICAgJ2lvbi10b2FzdCcsXG4gICAgICAgICdpb24tdG9hc3QnLFxuXG4gICAgICAgIC8vIG5hdmlnYXRpb25cbiAgICAgICAgJ2lvbi1yb3V0ZXInLFxuICAgICAgICAnaW9uLXJvdXRlJyxcbiAgICAgICAgJ2lvbi1yb3V0ZS1yZWRpcmVjdCcsXG4gICAgICAgICdpb24tcm91dGVyLWxpbmsnLFxuICAgICAgICAnaW9uLXJvdXRlci1vdXRsZXQnLFxuXG4gICAgICAgIC8vIHRhYnNcbiAgICAgICAgJ2lvbi10YWJzJyxcbiAgICAgICAgJ2lvbi10YWInLFxuXG4gICAgICAgIC8vIGF1eGlsaWFyXG4gICAgICAgICdpb24tcGlja2VyLWNvbHVtbicsXG4gICAgICAgICdpb24tdmlydHVhbC1zY3JvbGwnXG4gICAgICBdXG4gICAgfSlcbiAgICAudGhlbihoeWRyYXRlUmVzdWx0cyA9PiB7XG4gICAgICBoeWRyYXRlUmVzdWx0cy5kaWFnbm9zdGljcy5mb3JFYWNoKGQgPT4ge1xuICAgICAgICBpZiAoZC50eXBlID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihkLm1lc3NhZ2VUZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmIChkLnR5cGUgPT09ICdkZWJ1ZycpIHtcbiAgICAgICAgICBjb25zb2xlLmRlYnVnKGQubWVzc2FnZVRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGQubWVzc2FnZVRleHQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGRvYy5oZWFkICE9IG51bGwpIHtcbiAgICAgICAgY29uc3Qgc3R5bGVFbG1zID0gZG9jLmhlYWQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGVbZGF0YS1zdHlsZXNdJykgYXMgTm9kZUxpc3RPZjxIVE1MU3R5bGVFbGVtZW50PjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZUVsbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzdHlsZUVsbXNbaV0uc2V0QXR0cmlidXRlKCduZy10cmFuc2l0aW9uJywgYXBwSWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChkb2MuYm9keSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGlvblBhZ2VzID0gZG9jLmJvZHkucXVlcnlTZWxlY3RvckFsbCgnLmlvbi1wYWdlLmlvbi1wYWdlLWludmlzaWJsZScpIGFzIE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlvblBhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaW9uUGFnZXNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnaW9uLXBhZ2UtaW52aXNpYmxlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn1cbiJdfQ==